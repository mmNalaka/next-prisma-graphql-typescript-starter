### This file was generated by Nexus Schema
### Do not make changes to this file directly


scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Mutation {
  createOneUser(data: UserCreateInput!): User!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input PermissionCreateManyWithoutUserInput {
  connect: [PermissionWhereUniqueInput!]
  connectOrCreate: [PermissionCreateOrConnectWithoutuserInput!]
  create: [PermissionCreateWithoutUserInput!]
}

input PermissionCreateOrConnectWithoutuserInput {
  create: PermissionCreateWithoutUserInput!
  where: PermissionWhereUniqueInput!
}

input PermissionCreateWithoutUserInput {
  code: String!
  createdAt: DateTime
  group: String!
  label: String!
  updatedAt: DateTime
}

input PermissionScalarWhereInput {
  AND: [PermissionScalarWhereInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  group: StringFilter
  id: IntFilter
  label: StringFilter
  NOT: [PermissionScalarWhereInput!]
  OR: [PermissionScalarWhereInput!]
  updatedAt: DateTimeFilter
  userId: IntNullableFilter
}

input PermissionUpdateManyMutationInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  group: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PermissionUpdateManyWithoutUserInput {
  connect: [PermissionWhereUniqueInput!]
  connectOrCreate: [PermissionCreateOrConnectWithoutuserInput!]
  create: [PermissionCreateWithoutUserInput!]
  delete: [PermissionWhereUniqueInput!]
  deleteMany: [PermissionScalarWhereInput!]
  disconnect: [PermissionWhereUniqueInput!]
  set: [PermissionWhereUniqueInput!]
  update: [PermissionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PermissionUpdateManyWithWhereWithoutUserInput!]
  upsert: [PermissionUpsertWithWhereUniqueWithoutUserInput!]
}

input PermissionUpdateManyWithWhereWithoutUserInput {
  data: PermissionUpdateManyMutationInput!
  where: PermissionScalarWhereInput!
}

input PermissionUpdateWithoutUserInput {
  code: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  group: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PermissionUpdateWithWhereUniqueWithoutUserInput {
  data: PermissionUpdateWithoutUserInput!
  where: PermissionWhereUniqueInput!
}

input PermissionUpsertWithWhereUniqueWithoutUserInput {
  create: PermissionCreateWithoutUserInput!
  update: PermissionUpdateWithoutUserInput!
  where: PermissionWhereUniqueInput!
}

input PermissionWhereUniqueInput {
  code: String
  group: String
  id: Int
}

type Query {
  allUsers: [User]
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum QueryMode {
  default
  insensitive
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  id: Int!
  name: String
}

input UserCreateInput {
  createdAt: DateTime
  email: String
  emailVerified: DateTime
  image: String
  name: String
  permissions: PermissionCreateManyWithoutUserInput
  updatedAt: DateTime
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  permissions: PermissionUpdateManyWithoutUserInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
